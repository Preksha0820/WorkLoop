generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Company {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  domain    String?
  createdAt DateTime @default(now())
  users     User[]
}

model User {
  id               Int           @id @default(autoincrement())
  name             String
  email            String        @unique
  password         String
  role             Role
  teamLeadId       Int?
  createdAt        DateTime      @default(now())
  companyId        Int
  adminId          Int?
  phone            String?
  receivedMessages ChatMessage[] @relation("ReceivedMessages")
  sentMessages     ChatMessage[] @relation("SentMessages")
  reports          Report[]
  givenTasks       Task[]        @relation("AssignedBy")
  assignedTasks    Task[]        @relation("AssignedTo")
  admin            User?         @relation("AdminLead", fields: [adminId], references: [id])
  leads            User[]        @relation("AdminLead")
  company          Company       @relation(fields: [companyId], references: [id])
  teamLead         User?         @relation("TeamLead", fields: [teamLeadId], references: [id])
  teamMembers      User[]        @relation("TeamLead")
  
   // AI Assignment Features
  skills        Json?   // store as ["React", "Node.js"]
  availability  Float?  // e.g. workload ratio or hours available
  productivity  Float?  // e.g. average task efficiency
  score         Float?  // ML-predicted score (used for top-N ranking)

  
  @@index([adminId], map: "User_adminId_fkey")
  @@index([companyId], map: "User_companyId_fkey")
  @@index([teamLeadId], map: "User_teamLeadId_fkey")
}

model Report {
  id         Int      @id @default(autoincrement())
  userId     Int
  reportDate DateTime @default(now())
  content    String
  fileURL    String?
  comment    String?
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])

  @@unique([userId, reportDate])
  @@index([userId], map: "Report_userId_fkey")
}

model Task {
  id           Int        @id @default(autoincrement())
  title        String
  description  String
  assignedToId Int
  assignedById Int
  deadline     DateTime
  status       TaskStatus @default(IN_PROGRESS)
  createdAt    DateTime   @default(now())
  completedAt  DateTime?
  assignedBy   User       @relation("AssignedBy", fields: [assignedById], references: [id])
  assignedTo   User       @relation("AssignedTo", fields: [assignedToId], references: [id])
  
  // AI Assignment Features
  requiredSkills Json?   // e.g. ["Node.js", "SQL"]
  difficulty     Int?    // scale like 1–5 or 1–10

  @@index([assignedById], map: "Task_assignedById_fkey")
  @@index([assignedToId], map: "Task_assignedToId_fkey")
}

model ChatMessage {
  id         Int      @id @default(autoincrement())
  senderId   Int
  receiverId Int
  content    String
  createdAt  DateTime @default(now())
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])

  @@index([receiverId], map: "ChatMessage_receiverId_fkey")
  @@index([senderId], map: "ChatMessage_senderId_fkey")
}

enum Role {
  ADMIN
  TEAM_LEAD
  EMPLOYEE
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}
