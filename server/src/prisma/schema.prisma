generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Company {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  domain    String?
  createdAt DateTime @default(now())
  users     User[]
}

model User {
  id         Int      @id @default(autoincrement())
  name       String
  email      String   @unique
  password   String
  role       Role
  teamLeadId Int?
  createdAt  DateTime @default(now())
  companyId  Int
  adminId    Int?
  phone      String?

  // Reports & Tasks
  reports       Report[]
  givenTasks    Task[]   @relation("AssignedBy")
  assignedTasks Task[]   @relation("AssignedTo")

  // Chat Relations
  sentMessages     ChatMessage[] @relation("SentMessages")
  receivedMessages ChatMessage[] @relation("ReceivedMessages")

  // Hierarchical Relations
  admin       User?  @relation("AdminLead", fields: [adminId], references: [id])
  leads       User[] @relation("AdminLead")
  teamLead    User?  @relation("TeamLead", fields: [teamLeadId], references: [id])
  teamMembers User[] @relation("TeamLead")

  // Organization
  company Company @relation(fields: [companyId], references: [id])

  @@index([adminId], map: "User_adminId_fkey")
  @@index([companyId], map: "User_companyId_fkey")
  @@index([teamLeadId], map: "User_teamLeadId_fkey")
}

model Report {
  id         Int      @id @default(autoincrement())
  userId     Int
  reportDate DateTime @default(now())
  content    String
  fileURL    String?
  comment    String?
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])

  @@unique([userId, reportDate])
  @@index([userId], map: "Report_userId_fkey")
}

model Task {
  id           Int        @id @default(autoincrement())
  title        String
  description  String
  assignedToId Int
  assignedById Int
  deadline     DateTime
  status       TaskStatus @default(IN_PROGRESS)
  completedAt  DateTime?
  createdAt    DateTime   @default(now())

  assignedTo User @relation("AssignedTo", fields: [assignedToId], references: [id])
  assignedBy User @relation("AssignedBy", fields: [assignedById], references: [id])
}

model ChatMessage {
  id         Int      @id @default(autoincrement())
  senderId   Int
  receiverId Int
  content    String
  createdAt  DateTime @default(now())

  sender   User @relation("SentMessages", fields: [senderId], references: [id])
  receiver User @relation("ReceivedMessages", fields: [receiverId], references: [id])
}

enum Role {
  ADMIN
  TEAM_LEAD
  EMPLOYEE
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}
