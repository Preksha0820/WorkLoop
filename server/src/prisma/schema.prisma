generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Company {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  domain    String?
  createdAt DateTime @default(now())
  users     User[]
}

model User {
  id                                       Int           @id @default(autoincrement())
  name                                     String
  email                                    String        @unique
  password                                 String
  role                                     Role
  teamLeadId                               Int?
  createdAt                                DateTime      @default(now())
  companyId                                Int
  adminId                                  Int?
  phone                                    String?
  ChatMessage_ChatMessage_receiverIdToUser ChatMessage[] @relation("ChatMessage_receiverIdToUser")
  ChatMessage_ChatMessage_senderIdToUser   ChatMessage[] @relation("ChatMessage_senderIdToUser")
  reports                                  Report[]
  givenTasks                               Task[]        @relation("AssignedBy")
  assignedTasks                            Task[]        @relation("AssignedTo")
  admin                                    User?         @relation("AdminLead", fields: [adminId], references: [id])
  leads                                    User[]        @relation("AdminLead")
  company                                  Company       @relation(fields: [companyId], references: [id])
  teamLead                                 User?         @relation("TeamLead", fields: [teamLeadId], references: [id])
  teamMembers                              User[]        @relation("TeamLead")

  @@index([adminId], map: "User_adminId_fkey")
  @@index([companyId], map: "User_companyId_fkey")
  @@index([teamLeadId], map: "User_teamLeadId_fkey")
}

model Report {
  id         Int      @id @default(autoincrement())
  userId     Int
  reportDate DateTime @default(now())
  content    String
  fileURL    String?
  comment    String?
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])

  @@unique([userId, reportDate])
  @@index([userId], map: "Report_userId_fkey")
}

model Task {
  id           Int        @id @default(autoincrement())
  title        String
  description  String
  assignedToId Int
  assignedById Int
  deadline     DateTime
  status       TaskStatus @default(IN_PROGRESS)
  createdAt    DateTime   @default(now())
  completedAt  DateTime?
  assignedBy   User       @relation("AssignedBy", fields: [assignedById], references: [id])
  assignedTo   User       @relation("AssignedTo", fields: [assignedToId], references: [id])

  @@index([assignedById], map: "Task_assignedById_fkey")
  @@index([assignedToId], map: "Task_assignedToId_fkey")
}

model ChatMessage {
  id                                Int      @id @default(autoincrement())
  senderId                          Int
  receiverId                        Int
  content                           String
  createdAt                         DateTime @default(now())
  User_ChatMessage_receiverIdToUser User     @relation("ChatMessage_receiverIdToUser", fields: [receiverId], references: [id])
  User_ChatMessage_senderIdToUser   User     @relation("ChatMessage_senderIdToUser", fields: [senderId], references: [id])

  @@index([receiverId], map: "ChatMessage_receiverId_fkey")
  @@index([senderId], map: "ChatMessage_senderId_fkey")
}

enum Role {
  ADMIN
  TEAM_LEAD
  EMPLOYEE
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}
